1. When would you want to use a remote repository rather than keeping all your work local?
A remote repository would allow me to work from different computers without worrying about copying and pasting files between devices
or through the use of a thumb drive. It also allows a back kup to be stored so that in the even my computer crashed, but repository
would be saved and accessible. 

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Not all changes might be complete at the time the automatic save kicks in causing saved copies to be pulled that are no relevant. It also prevents and abundance of action between the local and GitHub repository. 

3. Describe the differences between forks, clones, branches. When would you use one instead of another. 

Fork is specifically within GitHub and allows you to clone another users repository, but not have any of your commits affect their repository. This is great for using someone else code to do your work without affecting them. Clones are direct copies of a repository either through GitHub or locally. It does tie the two copies together which would not be ideal if you would like a completely independent copy. A branch is not independent and instead is tied to the master. It is used when you would like to try a new feature or idea without directly affecting your main or working code. 

4. What is the benefit of having a copy of the last known state of the remote stored locally? 
Allows a user to be able to work on a copy offline while other team members work on the remote copy. It also doesn't affect version-control since you are able to merge the two copies without difficulty. 

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
If I were collarborating I would need to save the file after each session and send it to the people I would be working on. Then, depending on the software, I would have to make sure to have track changes on otherwise I would have to rely on the other collaborators to tell me what they changed. It has slightly less steps to save and send than Git or GitHub, so that would be a bit easier. However, tracking changes, approving or merging changes from other would be difficult. 

6. When would you want to make changes in a seperate branch rather than directly in master? What benefits does each approach have? 

You would want to make changes in a seperate branch that are either experimental or require testing since the master branch is part of the final or working line. The benefit is that people can make multiple changes to a branch or work several different lines of thoughts without affecting the main line. 